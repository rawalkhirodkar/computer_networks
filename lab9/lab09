Exercise1:

Q1) 
We sent ping from uml2 after 5 ping replies had been received at uml1.

Observation:
uml1 received 5 ping packets and uml2 received 15 ping packets.

Explanation:

Firstly, uml1 sends arp request. As a result, uml3 has entry in its arp cache corresponding to the MAC address of uml1 for IP address 10.0.0.100.
So, uml3 sends ping reply to uml1. But when uml2 sends arp request, uml3 now has entry in arp cache corresponding to MAC address of uml2 for IP address 10.0.0.100 .
So uml3 sends ping reply from 10.0.0.100 to uml2. As a result, uml2 receives all the replies for the 10 ping requests it sent as well as the 5 ping requests (sequence numbers 6,7,8,9,10) sent by uml1.

--------------------------------------------------
	
Q2) 
We sent ping from uml2 after 5 ping replies had been received at uml1.

Observation: 
uml1 received 5 ping packets and uml2 received 15 ping packets.

Explanation:

First, uml1 sends arp request (which is broadcast). uml3 now has entry in arp cache corresponding to the MAC address of uml1 for IP address 10.0.0.100.
So, uml3 sends ping reply to uml1.
Now, when uml2 has to send packet to uml4, it will first broadcast an arp request which will have IP and MAC address of uml2. As a result, both uml3 and uml4 will now have entries in arp cache corresponding to the MAC address of uml2 for IP address 10.0.0.100.	
So, any reply they want to send to 10.0.0.100 will go to uml2.

---------------------------------------------------

Q3) 

Observation:
In both cases, uml2 replied to the ping requests.
On seeing the tcpdump data at uml3 and uml4, we observed that arp reply sent by uml2 was received first in both cases.

Explanation:
Linux ignores unsolicited (arp) replies, but acts on (arp) requests. As a result, a host accepts only the arp reply it receives first. So, if uml2 wants to capture ping requests, it should try to reply first to the arp request. 
Alternatively, it can also send periodic gratuitous arp requests so that the other hosts change their arp entries to MAC address of uml2.

-------------------------------------------------------------
-------------------------------------------------------------
Exercise 2

After setting the IPs and netmasks of the uml machines to the ones required, using ifconfig eth1 <IP addr> netmask <netmask> up on uml1 and uml4, we start the experiment00


Part-1


On xterm of uml1,
we type ping 10.0.0.101 -c 10
After 3-4 ping packets got sent from uml1, on the xterm of uml4, we also type ping 10.0.0.101 -c 10. The observations are:
On xterm of uml1, 
ping 10.0.0.101 -c 10
PING 10.0.0.101 (10.0.0.101) 56(84) bytes of data.
64 bytes from 10.0.0.101: icmp_seq=1 ttl=64 time=20.5 ms
64 bytes from 10.0.0.101: icmp_seq=2 ttl=64 time=0.311 ms
64 bytes from 10.0.0.101: icmp_seq=3 ttl=64 time=0.335 ms
64 bytes from 10.0.0.101: icmp_seq=4 ttl=64 time=0.324 ms
64 bytes from 10.0.0.101: icmp_seq=5 ttl=64 time=0.315 ms
64 bytes from 10.0.0.101: icmp_seq=6 ttl=64 time=0.342 ms
64 bytes from 10.0.0.101: icmp_seq=7 ttl=64 time=0.307 ms
64 bytes from 10.0.0.101: icmp_seq=8 ttl=64 time=0.349 ms
64 bytes from 10.0.0.101: icmp_seq=9 ttl=64 time=0.353 ms
64 bytes from 10.0.0.101: icmp_seq=10 ttl=64 time=0.328 ms

--- 10.0.0.101 ping statistics ---
10 packets transmitted, 10 received, 0% packet loss, time 9084ms
rtt min/avg/max/mdev = 0.307/2.355/20.595/6.080 ms

and on xterm of uml4,
ping 10.0.0.101 -c 10
connect: Network is unreachable

Therefore, uml1 is able to ping to uml2 but uml4 is not.

Explanation:
The netmask of uml1 is 255.255.255.240 and it's IP is 10.0.0.100.
uml1 gets the subnet number by AND-ing it's IP and it's netmask to get 10.0.0.96
It also ANDs the the destination IP(10.0.0.101) and it's own netmask to get 10.0.0.96
Therefore, since the subnet value's match, it thinks that destination IP is in it's own subnet and, therefore, starts transmitting(sends arp and receives MAC address from uml2 since they are in the same physical network) and uml2 also responds to the ping.

However, when uml4 ANDs it's IP(10.0.0.120) and it's netmask to get 10.0.0.112 as the subnet number while the AND of the destination IP(10.0.0.101) and it's netmask(255.255.255.240) to get 10.0.0.96, they don't match so it thinks that the destination IP is in a different subnet and, therefore, states that the Network is unreachable.

--------------------------------------------------

Part-2

On the xterm of uml2,
we first type ping 10.0.0.100 (uml1)
ping 10.0.0.100 -c 10
PING 10.0.0.100 (10.0.0.100) 56(84) bytes of data.
64 bytes from 10.0.0.100: icmp_seq=1 ttl=64 time=20.5 ms
64 bytes from 10.0.0.100: icmp_seq=2 ttl=64 time=0.239 ms
64 bytes from 10.0.0.100: icmp_seq=3 ttl=64 time=0.325 ms
64 bytes from 10.0.0.100: icmp_seq=4 ttl=64 time=0.343 ms
64 bytes from 10.0.0.100: icmp_seq=5 ttl=64 time=0.354 ms
64 bytes from 10.0.0.100: icmp_seq=6 ttl=64 time=0.350 ms
64 bytes from 10.0.0.100: icmp_seq=7 ttl=64 time=0.349 ms
64 bytes from 10.0.0.100: icmp_seq=8 ttl=64 time=0.344 ms
64 bytes from 10.0.0.100: icmp_seq=9 ttl=64 time=0.363 ms
64 bytes from 10.0.0.100: icmp_seq=10 ttl=64 time=0.315 ms

--- 10.0.0.100 ping statistics ---
10 packets transmitted, 10 received, 0% packet loss, time 9103ms
rtt min/avg/max/mdev = 0.239/2.349/20.517/6.056 ms

Then, we ping 10.0.0.120(uml4),
ping 10.0.0.120 -c 10
PING 10.0.0.120 (10.0.0.120) 56(84) bytes of data.

--- 10.0.0.120 ping statistics ---
10 packets transmitted, 0 received, 100% packet loss, time 9091ms

Running tcpdump on uml4 gives,
tcpdump -r uml4.pcap
reading from file uml4.pcap, link-type EN10MB (Ethernet)
11:44:14.959952 IP 10.0.0.101 > 10.0.0.120: ICMP echo request, id 50692, seq 1, length 64
11:44:15.974498 IP 10.0.0.101 > 10.0.0.120: ICMP echo request, id 50692, seq 2, length 64
11:44:16.989343 IP 10.0.0.101 > 10.0.0.120: ICMP echo request, id 50692, seq 3, length 64
11:44:17.993688 IP 10.0.0.101 > 10.0.0.120: ICMP echo request, id 50692, seq 4, length 64
11:44:19.007857 IP 10.0.0.101 > 10.0.0.120: ICMP echo request, id 50692, seq 5, length 64
11:44:19.961706 arp who-has 10.0.0.120 tell 10.0.0.101
11:44:19.961729 arp reply 10.0.0.120 is-at fe:fd:00:00:04:01 (oui Unknown)
11:44:20.012972 IP 10.0.0.101 > 10.0.0.120: ICMP echo request, id 50692, seq 6, length 64
11:44:21.027243 IP 10.0.0.101 > 10.0.0.120: ICMP echo request, id 50692, seq 7, length 64
11:44:22.041703 IP 10.0.0.101 > 10.0.0.120: ICMP echo request, id 50692, seq 8, length 64
11:44:23.045967 IP 10.0.0.101 > 10.0.0.120: ICMP echo request, id 50692, seq 9, length 64
11:44:24.060362 IP 10.0.0.101 > 10.0.0.120: ICMP echo request, id 50692, seq 10, length 64


Explanation:
uml2 ANDs it's own IP(10.0.0.101) and it's subnet 255.255.255.0 to get 10.0.0.0 as it's subnet.
It also ANDs uml1's IP(10.0.0.100) and uml4's IP(10.0.0.120) with it's subnet 255.255.255.0 to get 10.0.0.0. Therefore, uml2 thinks that uml1 and uml4 are in it's own subnet and sends ARP replies. uml1 and uml4 send an arp reply(since arp is a link layer protocol and not a network layer one). However, while ping requests go from uml2 to uml1 and uml4, only uml1 replies and uml4 doesn't because of the same reason as that of Part-1 of Exercise 2) [uml1 thinks uml2 is in it's subnet but uml4 doesn't think so]

---------------------------------------------------------
---------------------------------------------------------

